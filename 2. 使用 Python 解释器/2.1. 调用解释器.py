"""
Python 解释器在其被使用的机器上通常安装为 /usr/local/bin/python3.8；将 /usr/local/bin 加入你的 Unix 终端的搜索路径就可以通过键入以下命令来启动它：

python3.8
就能运行了 1 。安装时可以选择安装目录，所以解释器也可能在别的地方；可以问问你身边的 Python 大牛，或者你的系统管理员。（比如 /usr/local/python 也是比较常用的备选路径）

在 Windows 机器上当你从 Microsoft Store 安装 Python 之后，python3.8 命令将可使用。 如果你安装了 py.exe 启动器，你将可以使用 py 命令。 参阅 附录：设置环境变量 了解其他启动 Python 的方式。

在主提示符中输入文件结束字符（在 Unix 系统中是 Control-D，Windows 系统中是 Control-Z）就退出解释器并返回退出状态为0。如果这样不管用，你还可以写这个命令退出：quit()。

解释器的行编辑功能在支持 GNU Readline 库的系统中也包括交互式编辑，历史替换和代码补全等。 检测是否支持行编辑最快速的方式是在首次出现 Python 提示符时输入 Control-P。 如果听到“哔”提示音，就说明支持行编辑；请参阅附录 交互式编辑和编辑历史 了解有关功能键的介绍。 如果什么都没发生，或是回显了 ^P，说明不支持行编辑；你只能用退格键从当前行中删除字符。

解释器运行的时候有点像 Unix 命令行：在一个标准输入 tty 设备上调用，它能交互式地读取和执行命令；调用时提供文件名参数，或者有个文件重定向到标准输入的话，它就会读取和执行文件中的 脚本。

另一种启动解释器的方式是 python -c command [arg] ...，其中 command 要换成想执行的指令，就像命令行的 -c 选项。由于 Python 代码中经常会包含对终端来说比较特殊的字符，通常情况下都建议用英文单引号把 command 括起来。

有些 Python 模块也可以作为脚本使用。可以这样输入：python -m module [arg] ...，这会执行 module 的源文件，就跟你在命令行把路径写全了一样。

在运行脚本的时候，有时可能也会需要在运行后进入交互模式。这种时候在文件参数前，加上选项 -i 就可以了。

关于所有的命令行选项，请参考 命令行与环境。
"""